This is a compilation of notes to be used as supplementary material for
an arch linux install. Use alongside the installation guide found at 
wiki.archlinux.org.

/***********************/
/* 1. Pre-installation */
/***********************/

1.1 Acqure an installation image
1.2 Verify signature
1.3 Prepare an installation medium
  -use a fresh arch iso
  -dd command is easiest:

    $ dd bs=4M if=path/to/archlinux.iso of=/dev/flashDrive
         conv=fsync oflag=direct status=progress

1.4 Boot the live environment
1.5 Set the console keyboard layout and font
1.6 Verify the boot mode 
1.7 Connect to the internet
  -If you're wired then just plug in the ethernet and it should work fine.
  -If using wifi, connect to the network with iwctl.
    
    # iwctl                   // this will give you an interactive prompt
    [iwd]# device list                 // get the name of wireless device
    [iwd]# station *device* scan            // scan for wireless networks
    [iwd]# station *device* get-networks                 // list networks
    [iwd]# station *device* connect *SSID*          // connect to network
    
  -enter the password when prompted and then exit with Ctrl+d.
  -verify the connection with:
  
    # ping archlinux.org  
  
1.8 Update the system clock  
1.9 Partition the disks
  -format all drives as ext4 Linux Filesystem.
  -boot drive needs 2 partitions: a 300M EFI boot partition
   and the rest of the drive is Linux x86_64 root (ext4)
  -list the drives with:
    # lsblk -l

  -and use cfdisk to make the partitioning easy.

1.10 Format the partitions 
1.11 Mount the file system

/*******************/
/* 2. Installation */
/*******************/

2.1 Select the mirrors
  -use vim to open the mirrorlist at /etc/pacman.d/mirrorlist and 
   move the American mirror to the top of the list.

2.2 Install essential packages
  -in addition to the essential packages, install man pages, vim
   for early text editing, and networkManager.
    
    # pacstrap -K /mnt base linux linux-firmware
                       man-db man-pages texinfo
                       vim networkmanager sudo


/***************************/
/* 3. Configure the system */
/***************************/

3.1 Fstab
3.2 Chroot
3.3 Time zone
3.4 Localization
3.5 Network configuration
  -after setting up the hostname file, set up NetworkManager so the internet
   works on reboot.

    # systemctl enable NetworkManager.service

3.6 Initramfs
3.7 Root password
3.8 Boot loader
  -use GRUB bootloader, very easy. 
  -first command installs the packages.
  -second installs bootloader
  -third configures bootloader

    # pacman -S grub efibootmgr
    # grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB
    # grub-mkconfig -o /boot/grub/grub.cfg

  -then, intel microcode
  -install ucode and reconfigure grub so it applies the microcode

    # pacman -S intel-ucode
    # grub-mkconfig -o /boot/grub/grub.cfg

-finished with basic installation
-exit chroot, unmount drives and shutdown:

  # exit
  # umount -R /mnt
  # shutdown +0

-remove the installation USB and boot into the new system.


/****************/
/* Post-install */
/****************/

-this section sets up the newly installed system. Login to the new system
 as root.
-setup a non-root user and set the password:
  
  # useradd -m *user*
  # passwd *user*
    
-add the new user to the sudoers file with visudo
  
  # EDITOR=neovim visudo

    *user* ALL=(ALL:ALL) ALL    // add this line to the file
    
-then logout of root and login as the new user. 
-verify the internet:

  $ ping archlinux.org

-if on wifi, you may need to connect manually:

  $ nmcli device wifi list
  $ nmcli device wifi connect "SSID" password "password"

-setup pacman by editing pacman.conf to enable the multilib repo and
 enable parallel downloading:
 (uncomment the lines):
  
    "/etc/pacman.conf"
    [options]
    ParallelDownloads = 5
    ...
    [multilib]
    Include = /etc/pacman.d/mirrorlist

-run pacman once to generate and sync databases:

  $ sudo pacman -Syu

-run reflector once here for the fastest and most up to date mirrors

  $ sudo pacman -S reflector
  $ sudo reflector --latest 20 --sort rate --save /etc/pacman.d/mirrorlist

-download and run the installer script to install packages and perform
 basic configuration:

  $ curl -LJO https://github.com/markgallant01/.dotfiles/raw/main/scripts/initial_setup.sh
  $ chmod +x initial_setup.sh
  $ ./initial_setup.sh


/***********************/
/* POST-INSTALL-SCRIPT */
/***********************/

-if nvidia drivers were installed, you must edit the file 
 /etc/mkinitcpio.conf to remove the 'kms' module from the HOOKS array.

  $ sudo vim /etc/mkinitcpio.conf

  -after that, re-run the command to regenerate the initramfs

    $ sudo mkinitcpio -P

-you should now be able to launch xorg:
  
  $ startx

-before running the final settings script, must authenticate with github
-launch web browser and login to github account
-the installer script generated new ssh keys. print the public key:

  $ cat ~/.ssh/id_ed25519.pub

  -copy this output and add it to github ssh keys
  -verify the connection:

    $ ssh -T git@github.com

-once authenticated, run the final settings script.
    
  $ ./final_setup.sh

-reboot

/*********************/
/* FINISHING TOUCHES */
/*********************/

-launch discord once to generate the config file.
-edit the shown line in this file so Discord doesn't refuse to launch
 if there's an update that's not in the repo yet:
    
  ~/.config/discord/settings.json
  "SKIP_HOST_UPDATE": true

-on desktop, use these commands to set the volume to 100%:

  $ pactl set-sink-volume @DEFAULT_SINK@ 100%

-create additional directories in the home directory
 for any internal or external drives you want to mount
-set up the fstab here so that drives auto mount 
 (come back to this)
    
-place any wallpapers in ~/Photos/wallpaper/ for feh to use them

-delete the installer scripts:

  $ rm ~/initial_setup.sh ~/final_setup.sh

-log into firefox, discord, etc.

To-do:
  -keep configuring cmp menu
  -catpuccin color scheme?
  -move color bar closer for laptop screen size
  -split neovim init into separate files for better organization
  -customize neovim error messages and icons
  -make keybind cheat sheet
  -add video editing software to install script
  -setup cava config file and try to get it to work only with cmus
  -thunar image / video thumbnails
  -firefox developer mode
  -add overthewire programs like telnet and nmap
  -gtk dark theme for lutris and other stuff
  -firefox config file? Discord?
  -get music library incorporated somehow
  -set up wallpaper script
  -find a way to wrap reflector calls into script
  -consider adding a reflector call to 2.1 to get the best possible mirror
  -look into this: https://wiki.archlinux.org/title/Gamemode#top-page
  -go through bookmarked stuff
  -power management? (acpi?)

  -picom
    -not liking how windows kind of glitch around when they pop up or resize
    -considering terminal transparency again because that was kinda cool
