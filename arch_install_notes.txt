This is a compilation of notes to be used as a walkthrough / cheat-sheet
for an arch linux install. Use alongside the official install guide, not
as a substitute, in case anything about the process changes.

/* 1. Pre-installation */

1.1 Acqure an installation image
1.2 Verify signature
1.3 Prepare an installation medium
1.4 Boot the live environment
1.5 Set the console keyboard layout

  Everything above can be skipped. It's just downloading the iso and
  creating a bootable USB. The keyboard doesn't need to be set as the
  default US is correct. Refer to the above steps if you don't have
  a bootable USB and need to create one but otherwise skip to the next
  step.
  
1.6 Verify the boot mode
  Just run the following command and make sure it prints a bunch of files
  without error to verify that you're booted in UEFI mode:
  
    # ls /sys/firmware/efi/efivars
    
1.7 Connect to the internet
  If you're wired then just plug in the ethernet and it should work fine.
  If using wifi, connect to the network with iwctl.
    
    # iwctl                   // this will give you an interactive prompt
    [iwd]# device list            // get the name of wireless device
    [iwd]# station *device* scan      // scan for wireless networks
    [iwd]# station *device* get-networks    // list networks
    [iwd]# station *device* connect *SSID*
    
  Enter the password when prompted and then exit with Ctrl+d.
  
  Verify the connection with:
  
    # ping archlinux.org  
  
1.8 Update the system clock
  Just run the following command to make sure the clock is right
  
    # timedatectl status
    
1.9 Partition the disks
  List the disks with this command
    
    # lsblk -l
    
  You need one boot partition and one partition for the root directory.
  The boot partition should be 300M and the root directory should take
  up the rest of the available space on the disk.
  
  The boot partition should be type: EFI System Partition and the root
  directory partition should be type: Linux x86-64 root (/)
   
  Use cfdisk to make things easy:
  
    # cfdisk /dev/sdx 

1.10 Format the partitions
  Format the root directory partition as ext4 with this command:
  
    # mkfs.ext4 /dev/*root_partition*
    
  And format the boot partition with this command:
  
    # mkfs.fat -F 32 /dev/*efi_partition*
    
1.11 Mount the file system
  Mount both partitions with these commands:
  
    # mount /dev/*root_partition* /mnt
    # mount --mkdir /dev/*efi_partition* /mnt/boot

/* 2. Installation */

2.1 Select the mirrors
  Sort mirrors with reflector:
  
    # reflector --latest 50 --sort rate --save /etc/pacman.d/mirrorlist

2.2 Install essential packages
  Use pacstrap to install initial packages:
    
    # pacstrap -K /mnt base linux linux-firmware base-devel networkmanager network-manager-applet
                       neovim reflector man-db man-pages texinfo
                       
/* 3. Configure the system */

3.1 Fstab
  Run this command to generate an fstab file
  
    # genfstab -U /mnt >> /mnt/etc/fstab
    
3.2 Chroot
  Change root into the new install with this command:
  
    # arch-chroot /mnt
    
3.3 Time zone
  Set the time zone and generate /etc/adjtime with these commands:
  
    # ln -sf /usr/share/zoneinfo/Americas/New_York /etc/localtime
    # hwclock --systohc
    
3.4 Localization
  Edit /etc/local.gen and uncomment en_US.UTF-8 UTF-8. Then generate the
  locale.
  
    # nvim /etc/locale.gen
    # locale-gen
  
  Create the locale.conf file and set the LANG variable:
  
    "/etc/locale.conf"   <- Name of the file, do not include in the file
    LANG=en_US.UTF-8
    
3.5 Network configuration
  Create the hostname file:
  
    "/etc/hostname"
    *hostname*
    
 3.6 Initramfs -skip
 
 3.7 Root password
  Set the root password:
    
    # passwd
    
3.8 Boot loader
  Setup the grub bootloader. Install the packages and then run the install
  script.
  
    # pacman -S grub efibootmgr
    # grub-install --target=x86_64-efi --efi-directory=/boot
                   --bootloader-id=GRUB
  
  Then generate the config:
  
    # grub-mkconfig -o /boot/grub/grub.cfg
    
  Install intel microcode and regenerate grub config file
  
    # pacman -S intel-ucode
    # grub-mkconfig -o /boot/grub/grub.cfg

/* 4. Reboot */

Exit the chroot by typing 'exit'. Unmount all partitions then shutdown.

  # umount -R /mnt
  # shutdown +0

Remove the installation medium and restart.

/* Post-install */
  This section sets up the newly installed system. Login to the new system
  as root.
  
  Setup a non-root user and set the password:
  
    $ useradd -m *user*
    $ passwd *user*
    
  Add the new user to the sudoers file with visudo
  
    $ EDITOR=neovim visudo
    *user* ALL=(ALL:ALL) ALL
    
  Then logout of root and login as the new user. Create new user's home
  directory folders:
  
    $ pacman -S xdg-user-dirs
    $ xdg-user-dirs-update
    $ mkdir screenshots trash usb
    
  Setup pacman by editing pacman.conf to enable the multilib repo and
  enable parallel downloading:
  
    "/etc/pacman.conf"
    [options]
    ParallelDownloads = 5

    ...

    [multilib]
    Include = /etc/pacman.d/mirrorlist
  
  Set ParallelDownloads to 5 as shown and uncomment the multilib lines.

  Before installing anything run reflector again to sort the mirrors for
  the newly installed system
  
    $ sudo reflector --latest 50 --sort rate 
                     --save /etc/pacman.d/mirrorlist
  
  First download and setup git:
    $ sudo pacman -S git
    $ git config --global user.name "user_name"
    $ git config --global user.email "email"
    $ git config --global init.defaultBranch main
    $ git config --global color.ui auto
    $ git config --global pull.rebase false
    
  Install openssh for generating ssh keys for git:
    $ sudo pacman -S openssh
  
  Download X server:
    $ sudo pacman -S xorg-server
    
  Then install the proper set of GPU drivers:
    Intel:
      $ sudo pacman -S mesa lib32-mesa xf86-video-intel vulkan-intel
      
    Nvidia:
      $ sudo pacman -S nvidia nvidia-utils lib32-nvidia-utils
      
      For nvidia, follow these instructions to ensure everything works properly:
        https://wiki.archlinux.org/title/NVIDIA#Installation
      
    Regardless of which GPU driver set you install, install vulkan-icd-loader so vulkan works:
      $ sudo pacman -s vulkan-icd-loader
  
  Window manager, terminal, and compositor:
    Install dependencies first:
      $ sudo pacman -S libxft libxinerama ttf-dejavu
      
    $ git clone git@github.com:markgallant01/dwm.git
    $ cd dwm
    $ make
    $ make clean install
    
    $ pacman -S urxvt picom
    
  Login manager:
    $ pacman -S xorg-xinit
    
  Wallpaper:
    $ pacman -S feh
    
    Place any wallpapers in ~/Photos/wallpaper/ for feh to use them
    
  Pull down dotfiles:
    $ git clone git@github.com:markgallant01/.dotfiles.git
    $ cd .dotfiles
    
    Open the readme and follow the insructions to set up the symlinks
    and put the files in the correct places.
      
  You should now be able to use the command 'startx' to launch into a
  graphical system.
    
  Power management:
    (come back to this)
    $ pacman -S acpi
    
  Sound system:
    $ pacman -S pipewire lib32-pipewire wireplumber pipewire-pulse blueman
    
  Clock synchronization:
    $ systemctl enable --now systemd-timesyncd.service
  
  Performance:
    $ pacman -S htop
    
  USB stuff:
    $ pacman -S udisks2
  
  Printing:
    Maybe setup printing here in the future
    
  Downloading music from youtube:
    $ sudo pacman -S yt-dlp
    
  Web browsers:
    $ sudo pacman -S firefox chromium
    
  Discord:
    $ sudo pacman -S discord
    
    Edit the shown line in this file so Discord doesn't refuse to launch
    if there's an update that's not in the repo yet:
    
    ~/.config/discord/settings.json
      "SKIP_HOST_UPDATE": true
    
  Misc utilities:
    $ sudo pacman -S neofetch unzip xclip scrot ranger cmus thunar i3lock  // maybe sort these at some point
    
  Gaming:
    $ sudo pacman -S steam lutris
    
    Install all of these wine dependencies needed for gaming:
      sudo pacman -S --needed wine-staging giflib lib32-giflib libpng lib32-libpng libldap lib32-libldap gnutls lib32-gnutls \
                     mpg123 lib32-mpg123 openal lib32-openal v4l-utils lib32-v4l-utils libpulse lib32-libpulse libgpg-error \
                     lib32-libgpg-error alsa-plugins lib32-alsa-plugins alsa-lib lib32-alsa-lib libjpeg-turbo lib32-libjpeg-turbo \
                     sqlite lib32-sqlite libxcomposite lib32-libxcomposite libxinerama lib32-libgcrypt libgcrypt lib32-libxinerama \
                     ncurses lib32-ncurses ocl-icd lib32-ocl-icd libxslt lib32-libxslt libva lib32-libva gtk3 \
                     lib32-gtk3 gst-plugins-base-libs lib32-gst-plugins-base-libs vulkan-icd-loader lib32-vulkan-icd-loader
    
  Setup Yay to use the AUR:
    $ git clone https://aur.archlinux.org/yay.git
    $ cd yay
    $ makepkg -si
    
  AUR stuff:
    $ yay -S nvm nerd-fonts-dejavu-complete cava
    
  Lunarvim:
    First install dependencies:
      $ pacman -S rust python-pip
      
    Use NVM to install the latest version of nodejs:
      $ nvm install node
      
    Use the script on this page to install:
      https://www.lunarvim.org/docs/installation
      
    Make sure lunarvim config is symlinked
    
  Dark theme:
    $ pacman -S lxappearance-gtk3 arc-solid-gtk-theme arc-icon-theme
    
  xrandr --output DP-0 --mode 2560x1440 --rate 165.00 --output DP-2 --mode 2560x1440 --rate 165.00 --right-of DP-0 &

  To-do:
    -look into this: https://wiki.archlinux.org/title/Gamemode#top-page
    -go through bookmarked stuff
    -set up statusbar with brightness and volume?
